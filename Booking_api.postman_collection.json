{
	"info": {
		"_postman_id": "93858991-e338-4e75-9996-d79afe8bdd81",
		"name": "Booking_api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29629076"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//..............ID PASS.............\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"id\",jsonData.bookingid)\r",
							"\r",
							"//..............ID Status Check.........\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200: Booking created successfully.\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method Not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//FirstName\r",
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstname)\r",
							"pm.environment.set(\"firstname\",firstname)\r",
							"\r",
							"//LassttName\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastname)\r",
							"pm.environment.set(\"lastname\",lastname)\r",
							"\r",
							"//Total Price\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice)\r",
							"pm.environment.set(\"totalprice\", totalprice)\r",
							"\r",
							"//Deposit Paid\r",
							" var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							" pm.environment.set(\"depositPaid\", depositPaid)\r",
							"console.log(depositPaid)\r",
							"//RandomDate\r",
							"//var date = pm.variables.replaceIn(\"{{$randomDateFuture}}\")\r",
							"//console.log(date.format(\"YYYY-MM-DD\"))\r",
							"\r",
							"//Random Booking Date\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"checkin\",today.format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\",today.add(5, 'd').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"//Past-Date\r",
							"//pm.environment.set(\"checkin\",today.subtract(5, 'd').subtract(2, 'M').subtract(1, 'Y').format(\"YYYY-MM-DD\"))\r",
							"//Future Date\r",
							"//pm.environment.set(\"checkin\",today.add(5, 'd').add(2, 'M').add(1, 'Y').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"//Additional Needs\r",
							"var additionalNeeds = pm.variables.replaceIn(\"{{$randomNoun}}\")\r",
							"pm.environment.set(\"additionalNeeds\", additionalNeeds)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   //\"firstname\": \"Shilpi\",\r\n  // \"lastname\": \"Bosak\",\r\n  \"firstname\": \"{{firstname}}\",\r\n  \"lastname\": \"{{lastname}}\",\r\n\t\"totalprice\": {{totalprice}},\r\n\t\"depositpaid\": {{depositPaid}},\r\n\t\"bookingdates\": {\r\n    \t\"checkin\": \"{{checkin}}\",\r\n    \t\"checkout\": \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\": \"{{additionalNeeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Booking id validation\", function(){\r",
							"    pm.expect(jsonData.bookingid).to.eql(pm.environment.get(\"bookingid\"));\r",
							"});\r",
							"\r",
							"pm.test('First Name Validation.', function(){\r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"firstname\"));\r",
							"});\r",
							"\r",
							"pm.test('Last Name Validation.', function(){\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"lastname\"));\r",
							"});\r",
							"\r",
							"pm.test('Total Price Validation.', function(){\r",
							"    pm.expect(jsonData.totalprice).to.equal(parseInt(pm.environment.get(\"totalprice\")));\r",
							"});\r",
							"\r",
							"pm.test('Deposit Paid Validation.', function(){\r",
							"  pm.expect(jsonData.depositpaid).to.equal(JSON.parse(pm.environment.get(\"depositPaid\"))); \r",
							"});\r",
							"\r",
							"pm.test('Checkin Validation.', function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"checkin\"));\r",
							"});\r",
							"\r",
							"pm.test('Checkout Validation.', function(){\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"checkout\"));\r",
							"});\r",
							"\r",
							"pm.test('Additional Needs Validation.', function(){\r",
							"    pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"additionalNeeds\"));\r",
							"});\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad Request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//...........Token Pass..........\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"token\",jsonData.token)\r",
							"\r",
							"//.........Token Status Check.....\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200: Token Created successfully.\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method Not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//.........Update Status Check.....\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200: successfully Updated.\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method Not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//FirstName\r",
							"var firstname2 = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstname2)\r",
							"pm.environment.set(\"firstname2\",firstname2)\r",
							"\r",
							"//LassttName\r",
							"var lastname2 = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastname2)\r",
							"pm.environment.set(\"lastname2\",lastname2)\r",
							"\r",
							"//Total Price\r",
							"var totalprice2 = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(totalprice2)\r",
							"pm.environment.set(\"totalprice2\", totalprice2)\r",
							"\r",
							"//Deposit Paid\r",
							" var depositPaid2 = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositPaid2\", depositPaid2)\r",
							"console.log(depositPaid2)\r",
							"\r",
							"//Random Booking Date\r",
							"const moment = require('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"checkin2\",today.subtract(5, 'd').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout2\",today.add(3, 'd').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"//Additional Needs\r",
							"var additionalNeeds2 = pm.variables.replaceIn(\"{{$randomNoun}}\")\r",
							"pm.environment.set(\"additionalNeeds2\", additionalNeeds2)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname2}}\",\r\n\t\"lastname\" : \"{{lastname2}}\",\r\n\t\"totalprice\" : {{totalprice2}},\r\n\t\"depositpaid\" : {{depositPaid2}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin2}}\",\r\n    \t\"checkout\" : \"{{checkout2}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalNeeds2}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checking After Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Booking id validation Recheck.\", function(){\r",
							"    pm.expect(jsonData.bookingid).to.eql(pm.environment.get(\"bookingid\"));\r",
							"});\r",
							"\r",
							"pm.test('First Name Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"firstname2\"));\r",
							"});\r",
							"\r",
							"pm.test('Last Name Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"lastname2\"));\r",
							"});\r",
							"\r",
							"pm.test('Total Price Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.totalprice).to.equal(parseInt(pm.environment.get(\"totalprice2\")));\r",
							"});\r",
							"\r",
							"pm.test('Deposit Paid Validation Recheck.', function(){\r",
							"  pm.expect(jsonData.depositpaid).to.equal(JSON.parse(pm.environment.get(\"depositPaid2\"))); \r",
							"});\r",
							"\r",
							"pm.test('Checkin Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"checkin2\"));\r",
							"});\r",
							"\r",
							"pm.test('Checkout Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"checkout2\"));\r",
							"});\r",
							"\r",
							"pm.test('Additional Needs Validation Recheck.', function(){\r",
							"    pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"additionalNeeds2\"));\r",
							"});\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad Request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200: Booking cannot delete successfully.\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}else if(status == 201){\r",
							"    pm.test(\"Status code is 201: Booking Deleted successfully.\", function(){\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//..............ID Status Check.........\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200: Booking id Check.\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400: Bad request.\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401: Unauthorized.\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403: Forbidden.\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404: Not Found.\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405: Method Not Allowed.\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500: Internal Server Error.\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501: Not Implemented.\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502: Bad Gateway.\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503: Service unavailable.\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}